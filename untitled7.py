# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RWH8wjsOVydReG-AwgqYzbykskBn-7fv
"""

from google.colab import files

uploaded = files.upload()

with open('train_v9rqX0R.csv', 'w') as f:
  f.write('some content')

files.download('train_v9rqX0R.csv')

from google.colab import files

uploaded1 = files.upload()

pip install pycaret

uploaded

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from pycaret.utils import enable_colab 
enable_colab()

import io
df2 = pd.read_csv(io.BytesIO(uploaded['train_v9rqX0R.csv']))

import io
df1 = pd.read_csv(io.BytesIO(uploaded1['test_AbJTz2l.csv']))
df1

df2

x = df2.iloc[:,0:11]
x

x.shape

y = df2.iloc[:,[-1]]
y

x.info

df1.isna().sum()

x.isna().sum()

x['Item_Fat_Content'] = x.Item_Fat_Content.apply(lambda x : 1 if (x=='Low Fat')|(x=='LF')|(
                                                   x=='low fat') else 0)

df1['Item_Fat_Content'] = df1.Item_Fat_Content.apply(lambda x : 1 if (x=='Low Fat')|(x=='LF')|(
                                                   x=='low fat') else 0)
df1

x

x.Item_Weight.fillna(x.Item_Weight.mean(),inplace = True)
x

df1.Item_Weight.fillna(df1.Item_Weight.mean(),inplace = True)
df1

x.isna().sum()

x.dtypes

x['Small'] = x.Outlet_Size.apply(lambda x : 1 if x == 'Small' else 0)
x['Medium'] = x.Outlet_Size.apply(lambda x : 1 if x == 'Medium' else 0)
x['High'] = x.Outlet_Size.apply(lambda x : 1 if x == 'High' else 0)
x

df1['Small'] = df1.Outlet_Size.apply(lambda x : 1 if x == 'Small' else 0)
df1['Medium'] = df1.Outlet_Size.apply(lambda x : 1 if x == 'Medium' else 0)
df1['High'] = df1.Outlet_Size.apply(lambda x : 1 if x == 'High' else 0)
df1

df1['Tier 1'] = df1.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 1' else 0)
df1['Tier 2'] = df1.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 2' else 0)
df1['Tier 3'] = df1.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 3' else 0)
df1

x['Tier 1'] = x.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 1' else 0)
x['Tier 2'] = x.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 2' else 0)
x['Tier 3'] = x.Outlet_Location_Type.apply(lambda x : 1 if x == 'Tier 3' else 0)
x

df1['Supermarket Type1'] = df1.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type1' else 0)
df1['Supermarket Type2'] = df1.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type2' else 0)
df1['Supermarket Type3'] = df1.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type3' else 0)
df1['Grocery Store'] = df1.Outlet_Type.apply(lambda x : 1 if x == 'Grocery Store' else 0)
df1

x['Supermarket Type1'] = x.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type1' else 0)
x['Supermarket Type2'] = x.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type2' else 0)
x['Supermarket Type3'] = x.Outlet_Type.apply(lambda x : 1 if x == 'Supermarket Type3' else 0)
x['Grocery Store'] = x.Outlet_Type.apply(lambda x : 1 if x == 'Grocery Store' else 0)
x

df1 = df1.drop(['Outlet_Type','Outlet_Location_Type','Outlet_Size'],axis = 1)
df1

x = x.drop(['Outlet_Type','Outlet_Location_Type','Outlet_Size'],axis = 1)
x

x.dtypes

df1

soltest = df1[['Item_Identifier','Outlet_Identifier']]
soltest

df1 = df1.drop(['Item_Identifier','Outlet_Identifier'],axis = 1)
df1

x = x.drop(['Item_Identifier','Outlet_Identifier'],axis = 1)
x

x.dtypes

x['Item_Type'].value_counts()

df1.drop('Item_Type',axis =1 , inplace = True)

x.drop('Item_Type',axis =1 , inplace = True)

x

x.corr()

x.isna().sum()

y

x['Item_Outlet_sales'] = y['Item_Outlet_Sales']
x

from pycaret.regression import *
exp_reg101 = setup(data = x, target = 'Item_Outlet_sales') 
compare_models()

xgboost = create_model('xgboost')

print(xgboost)

gbr = create_model('gbr')

catboost = create_model('catboost')

print(catboost)

print(gbr)

tunned_xgboost = tune_model('xgboost')

predict_model(tunned_xgboost)

inal_xgboost = finalize_model(tunned_xgboost)

df1

df1

unseen_predictions = predict_model(inal_xgboost, data=df1)
unseen_predictions.head()

soltest['Item_Outlet_Sales'] = unseen_predictions['Label']
soltest

soltest.to_csv('soltest.csv', index=False)

